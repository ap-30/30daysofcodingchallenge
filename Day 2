You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.
Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.


class Solution:
    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:
        n = len(grid)
        total_sum = 0
        seen = set()
        expected_sum = (n * n * (n * n + 1)) // 2  # sum of 1 to n^2

        # Flatten the grid and calculate the sum of numbers
        for row in grid:
            for num in row:
                total_sum += num
                if num in seen:
                    repeated = num  # Found the repeated number
                seen.add(num)

        # Calculate the missing number
        missing = expected_sum - total_sum + repeated

        return [repeated, missing]
